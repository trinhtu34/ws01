[
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Bối cảnh Trong bối cảnh các hệ thống phần mềm cho hệ thống website đặt bàn và đặt đồ ăn online cho nhiều nhà hàng , lượng khách hàng truy cập trang web vào giờ cao điểm khoảng từ 80 - 150 khách truy cập đồng thời , lượng khách có thể tăng giảm theo thời gian . Hiện nay cần một khả năng triển khai nhanh chóng , ổn định , ít rủi ro . Thì chiến lược Blue / Green Deployment trở thành một trong những mô hình quan trọng nhằm đảm bảo :\nHigh availability : Nhằm đảm bảo hệ thống luôn sẵn sàng phục vụ traffic Minimal downtime : Nhằm giảm thiểu gián đoạn tới người dùng cuối khi code mới release Operational safety : Giúp hạn chế lỗi khi phát hành phiên bản mới Bằng cách kết hợp với việc sử dụng các AWS Service thì giải pháp này không chỉ giúp tối ưu chi phí vận hành , giảm công sức làm thủ công quá trình release mà còn tăng độ an toàn cho quá trình release code mới lên Production\nMục tiêu dự án Dự án này tập trung vào việc xây dựng giải pháp Blue / Green Deployment Automation và Canary Switch traffic . Có monitoring dựa trên CloudWatch Alarm và Manual Approval dựa trên cơ sở hạ tầng AWS, với các mục tiêu chính như sau :\nAutomation deployment : Tích hợp CICD Pipline để tự động Build và Deploy từ Github vào ECS Health validation : Thực hiện health check khi deploy code mới , điều này nhằm đảm bảo chương trình sau khi triển khai hoạt động ổn định Traffic management : Sử dụng phương pháp Canary switch traffic để chuyển đổi traffic từ môi trường cũ sang môi trường mới một cách từ từ , không chuyển tất cả traffic trong một lần , tránh việc chương trình hoạt động không tốt làm ảnh hưởng tới tất cả người dùng Rollback mechanisms : Tự động rollback trong trường hợp Health check thất bại Monitoring integration : Kết hợp với CloudWatch để giám sát trong quá trình switch traffic . Nếu CloudWatch Alarm vào trạng thái Alert thì tự động rollback ngay lập tức Dịch vụ được sử dụng Hệ thống sử dụng cơ sở hạ tầng AWS với cách dịch vụ như :\nCompute : ECS , EC2 Database : RDS Networking : VPC CI/CD : CodeBuild , CodePipline Container Management : ECR Orchestration and Automation : Step Functions , Lambda Monitoring and Notification : CloudWatch , SNS Storage : S3 Secrets Management: Secrets Manager Kiến trúc hệ thống Network Design Security Design Service and Resource Frontend CICD Design Backend CICD Design Quy trình hoạt động của Pipline Phát hiện thay đổi trong mã nguồn từ Github Repository Khi có thay đổi ( Commit / Merge ) vào nhánh master của Github Repository thì quy trình CI/CD sẽ được kích hoạt thông qua AWS CodePipline . Build và Push images vào ECR CodeBuild trong CodePipline sẽ thực hiện checkout code từ Github . CodeBuild sẽ sử dụng Docker cho việc build , tài khoản và mật khẩu của docker được lưu trong Secrets Manager , và thực hiện Build theo hướng dẫn trong file Buildspec.yml mà CodeBuild được cấp . Sau khi Build thành công thì images sẽ được Push vào ECR Repository . Ngoài ra còn một file là imageDetail.json cũng được tạo trong quá trình build , trong file này sẽ lưu các thông tin để làm input cho Step Functions như imageUri , BASE_SERVICE_NAME , rule_arn , file này sẽ lưu trong S3 Bucket . Khởi động Step Functions Sau khi push images thành công , CodePipline sẽ invoke Step Functions . Input của Step Functions sẽ là 1 file imageDetail.json được lưu trong S3 bucket , trong đó bao gồm các thông số được truyền từ Buildspec.yml như : imageUri , BASE_SERVICE_NAME , rule_arn . Những thông số này sẽ là input cho các Lambda functions trong quá trình deployment . Triển khai ECS Task Definition mới và deploy vào ECS Service Lambda trong Step Functions sẽ tạo Task definition mới từ images vừa được push vào ECR . Tiếp theo , một Lambda khác sẽ thực hiện việc Scale out một ECS Service Blue hoặc Green tùy tình trạng hiện tại bằng Task definition mới vừa tạo ở trên . Xác định Target Group cần Triển khai Một Lambda sẽ thực hiện công việc xác định Target Group tương ứng với Rule đang triển khai , do Frontend và Backend được triển khai trên cùng một Application Load Balancer , và được phân biệt bằng Rule . Target Group Health check Lambda sẽ thực hiện kiểm tra trạng thái Health Check của target group của ECS Service vừa được Scale out . Nếu unhealthy thì sẽ Rollback toàn bộ quá trình deploy trước đó về trạng thái ban đầu . Nếu healthy thì tiếp tục quá trình Canary Switch traffic . Canary Switch traffic Quá trình Switch traffic diễn ra theo nhiều bước , traffic sẽ được chuyển dần dần từ 25% , 50% , 75% và cuối cùng là 100% như sau : Chuyển 25% traffic đầu tiên : Step Functions sẽ gọi một Lambda thực hiện việc switch 25% traffic sang ECS Service có Task Definitions mới vừa được Scale out . Tiếp theo Step Functions gọi CloudWatch describleAlarm để kiểm tra Alarm của Target Group , nếu cách Alarm này có StateValue = OK thì sẽ tiếp tục quá trình switch traffic cho tới 100% . Nếu các Alarm có StateValue = Alert thì thực hiện Rollback toàn bộ về trạng thái ban đầu . Manual Approval Sau khi switch 100% traffic sang Service mới , Step Functions sẽ đi đến bước Mannual Approval . Step Functions sẽ gọi Lambda có sử dụng .waitForTaskToken để gửi thông báo qua Slack kèm 2 nút lựa chọn : Approve hoặc Reject . Sau khi người dùng bên Slack chọn 1 trong 2 lựa chọn là Approve hoặc Reject thì Slack sẽ call tới 1 API gửi về TaskToken và lựa chọn của người dùng bên Slack . Nếu thông tin gửi về là Approve thì hoàn tất việc switch traffic và Scale in ECS Service cũ . Nếu Reject thì Rollback toàn bộ hệ thống bao gồm traffic , ECS Service . Quy trình đảm bảo việc triển khai an toàn , có khả năng tự động Rollback chính xác , và cho phép Manual Approval\nPhân tích chi phí của toàn bộ project Tài nguyên sử dụng EC2 :\nInstance type : t3.micro RDS\nInstance type : db.t3.large Storage type : Allocated storage : Provisioned IOPS : Storage throughput : Maximum storage threshold : ECS\nFrontend Backend Chi phí cố định Chi Phí Theo tuần Theo tháng Theo quý Theo năm Secret Manager 1 1 1 1 CodeBuild 1 1 1 1 Step Functions 1 1 1 1 Lambda 1 1 1 1 API Gateway 1 1 1 1 SNS 1 1 1 1 CloudWatch 1 1 1 1 Chi phí không cố định Data transfer Application Load Balancer Để giảm chi phí cho bài lab này , nên tôi chỉ sử dụng Deployment options của RDS là : Single-AZ DB instance deployment , Instance type khi dự án lên Production nên dùng t3.medium hoặc t3.large và deployment option nên dùng là : Multi-AZ DB instance deployment cho lượng khách hàng chỉ khoảng 120 lượt truy cập vào giờ cao điểm của hiện tại\nLợi ích đem lại Giảm downtime khi phát hành phiên bản mới . Tăng độ an toàn nhờ health check và rollback tự động . Tối ưu chi phí và công sức bỏ ra khi vận hành nhờ quá trình tự động hóa . Khả năng mở rộng linh hoạt cho Pipline khi sử dụng Lambda và Step Functions . "
},
{
	"uri": "//localhost:1313/vi/7-create_cicd_pipline/7.1-create_and_configure_slack/",
	"title": "Tạo và cấu hình Slack App",
	"tags": [],
	"description": "",
	"content": "Mục đích : Để lấy Bot User OAuth Token và CHANNEL ID\nĐầu tiên bạn cần truy cập vào đường dẫn https://slack.com\nSau đó bạn cần đăng nhập . Để đăng nhập , bạn cần ấn nút sign in , bạn có thể chọn các hình thức đăng nhập phù hợp Sau khi đăng nhập , bạn sẽ có giao diện như sau Sau đó bạn ấn Create a new workspace Nếu bạn thấy yêu cầu nhập email thì bạn chỉ cần nhập lại email , ấn continue , chờ nhận mã gửi về email và tiếp tục ấn continue Tiếp theo sẽ có yêu cầu nhập tên của nhóm , bạn nhập vào the first workshop project Tiếp theo bạn cần nhập vào tên hiển thị của bạn , tùy bạn Bỏ qua bước này Tiếp theo bạn chọn start with limit free version Vào giao diện chính , lúc này bạn sẽ cần tạo 1 app để hiển thị thông báo Approve . Bạn cần ấn vào add apps Tiếp theo ấn vào Browse app Tiếp theo ấn vào Build Tiếp theo ấn Create new app Chọn vào from a manifest Chọn workspace bạn vừa tạo Chọn Next 2 lần Ấn Create Giao diện sau khi tạo thành công sẽ hiện ra như trong hình Để vào mục cấu hình cho Slack app , bạn chỉ cấn ấn vào App có Workspace bạn vừa tạo Tiếp theo bạn cần tìm đến mục Interactivity \u0026amp; Shortcuts và bật lên . Hãy nghi nhớ mục \u0026ldquo;Request URL\u0026rdquo; , tại chương 7.2 sẽ cần dùng tới nó . Hiện tại bạn điền tạm 1 link nào đó ví dụ https://google.com . Sau đó ấn vào Save changes để lưu thay đổi Tiếp theo bạn ấn vào OAuth \u0026amp; Permissions Tiếp theo là kéo xuống phần Scopes , ấn vào Add an OAuth Scope Tiếp theo chọn 2 Scopes trong hình Tiếp theo , bạn kéo lên trên và ấn vào Install to the first workshop project ( Phần chữ này sẽ thay đổi theo tên workspace của bạn ) Sau khi ấn , bạn sẽ hiện ra giao diện trong hình và ấn vào Allow Sau khi ấn Allow bạn sẽ được đưa về giao diện cấu hình . Bạn sẽ thấy mã \u0026ldquo;Bot User OAuth Token\u0026rdquo; , bạn nên copy lại , chương 7.2 sẽ sử dụng Sau bước này , bạn có thể tắt giao diện cấu hình và trở về trang chính của workspace . Lúc này bạn sẽ thấy có 1 mục là \u0026ldquo;Demo app\u0026rdquo; hiển thị sau phần \u0026ldquo;Slackbot\u0026rdquo; Tiếp theo , bạn cần copy lại CHANNEL_ID từ đường link : ví dụ link của tôi https://app.slack.com/client/T09CUJHAGTV/D09CUTR80N7?entry_point=nav_menu . Thì lấy D09CUTR80N7 , bạn nên lưu lại . "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Triển khai hệ thống CICD Blue / Green Deployment tự động với Lamba và Step Functions",
	"tags": [],
	"description": "",
	"content": "Triển khai hệ thống CICD Blue / Green Deployment tự động với Lamba và Step Functions Nội dung Giới thiệu Cấu hình Networking Tạo Application Load Balancer Tạo cơ sở dữ liệu Triển khai Backend Triển khai Frontend Tạo CICD Pipline Thử nghiệm kết quả Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/2-networking_configuration/",
	"title": "Cấu hình Networking",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Trên thanh tìm kiếm\nGõ VPC trên thanh tìm kiếm\nChọn vào dịch vụ VPC Chọn vào Your VPCs Chọn Create VPC Chọn VPC and more\nNhập vào tên của VPC the-first-workshop-project Chọn vào Create VPC Sau khi tạo xong VPC thì sẽ hiển thị như sau Xem VPC sau khi tạo thành công Tạo Security Group Bastion security group Chọn vào Secutiry group Chọn Create security group Nhập Security group name là bastion-sg\nNhập Description là allow access from company ip addresses\nChỉnh VPC thành VPC bạn vừa tạo trước đó là the-first-workshop-project-vpc\nChỉnh Inbound rules có Type là SSH , Source là MyIP Chọn Create security group Public security group Chọn vào Secutiry group Chọn Create security group Nhập Security group name là public-sg\nNhập Description là allow access from everywhere ipv4\nChỉnh VPC thành VPC bạn vừa tạo trước đó là the-first-workshop-project-vpc\nChỉnh Inbound rules có Type là HTTP , Source là everywhere-IPv4 Chọn Create security group Private security group Chọn vào Secutiry group Chọn Create security group Nhập Security group name là private-sg\nNhập Description là allow public sg traffic to backend and frontend\nChỉnh VPC thành VPC bạn vừa tạo trước đó là the-first-workshop-project-vpc\nChỉnh Inbound rules Type là HTTPS , Source là Custom , sau đó ấn ô tìm kiếm và tìm và chọn vào public-sg đã tạo trước đó Chọn Create security group Sau khi tạo private-sg thành công , bạn sẽ được hiển thị giao diện như sau Tiếp theo , bạn cần ấn Edit inbound rule để có thể thêm 1 inbound nữa Ấn vào nút Add rule Tiếp theo , bạn chọn Type là HTTPS , Source là custom , bạn tìm đến private-sg trong thanh tìm kiếm , và ấn vào\nCuối cùng ấn nút Save rules Database security group Chọn vào Secutiry group Chọn Create security group Nhập Security group name là database-sg\nNhập Description là allow access from private-sg and bastion-sg\nChỉnh VPC thành VPC bạn vừa tạo trước đó là the-first-workshop-project-vpc\nChỉnh Inbound rules Chọn Create security group "
},
{
	"uri": "//localhost:1313/vi/7-create_cicd_pipline/7.2-create_lambda/",
	"title": "Tạo Lambda Functions",
	"tags": [],
	"description": "",
	"content": "Nơi lưu trữ source code của các lambda function thực hiện việc CI/CD : vào project tên là LuanVanTotNghiep , sau đó vào .aws , tiếp tục vào CICD using step functions , tiếp tục vào lambda functions\nTạo các lambda functions Vào giao diện Console của AWS\nNhập vào thanh tìm kiếm lambda , chọn vào dịch vụ Lambda Ấn vào mục Dashboard hoặc Functions đều được , và sau đó chọn Create function Nhập functions name ws-parse-artifact-from-CodeBuild, chọn Runtime như trong hình , và cuối cùng chọn Create function Sau khi chờ thời gian tạo function , bạn sẽ được chuyển vào trong function bạn vừa tạo , nếu như bị ra ngoài thì bạn chỉ cần ấn vào mục Functions \u0026ndash;\u0026gt; Hiển thị danh sách functions bạn có \u0026ndash;\u0026gt; Ấn vào funtion bạn vừa tạo là được Vào file có tên parse-artifact-from-codebuild trong nơi lưu trữ ( Tôi đã Note ở trên đầu ) , và copy nội dung của toàn bộ file vào phần Code của Lambda . Sau khi copy code bạn nhớ phải ấn vào Deploy để code có thể lưu thay đổi .\nLàm tương tự để tạo ra các function khác , tên lần lượt như sau :\nws-register-new-task-definition ws-scale-out-ecs-service ws-check-blue-green ws-poll-target-health ws-canary-switch-traffic ws-scale-in-ecs-service ws-request-to-slack-for-manual-approval ws-response-approval-information-from-slack Cấu hình env cho một số functions Để truy cập vào nơi cấu hình Environment Variable của Lambda , bạn chọn một Lambda cần cấu hình , sau đó chọn vào mục Configuraion và ấn xuống mục Environment Variable\nCấu hình cho file : ws-parse-artifact-from-CodeBuild ECS_CLUSTER , LISTENER_ARN Cấu hình cho file : ws-request-to-slack-for-manual-approval SLACK_BOT_TOKEN , SLACK_CHANNEL_ID Tại đây bạn nhập vào Bot User OAuth Token vào SLACK_BOT_TOKEN và CHANNEL ID vào SLACK_CHANNEL_ID bạn vừa Copy tại Chương 7.1 Cấu hình Permissions cho Lambda functions Lý do : Bởi vì một số functions sẽ thực hiện một số thao tác trên các service khác , nên chúng ta cần cấp quyền để Lambda functions có thể thực hiện hành động . Đây là lý do chính khiến cho việc khi CICD Pipline hoạt động bị báo lỗi 403\nĐể cấu hình Permission cho từng lambda bạn làm theo như sau :\nTrong giao diện của 1 lambda , bạn ấn vào mục Configuration , ngay ở dưới có mục Permissions Sau đó , bạn ấn vào Role name , bạn sẽ được chuyển qua dịch vụ IAM để cấu hình Permission cho lambda hiện tại . Tiếp theo , bạn ấn vào mục Add Permissions và chọn vào Create inline policy . Nếu bạn muốn attach policy có sẵn của AWS như các Permission FullAccess,\u0026hellip; thì chọn Attach policy , sau đó nhập tên policy ví dụ như AWSStepFunctionsFullAccess và ấn vào rồi ấn vào Add Permissions ở góc dưới bên phải là được .\nTiếp tục , chọn mục JSON để hiển thị policy editor Sau đó , bạn copy Inline policy tương ứng với từng file ở dưới và dán vào Policy editor , sau đó bạn ấn Next ở cuối góc phải màn hình Tiếp theo , bạn nhập vào Policy name ví dụ như policy-for-create-new-task-definition và ấn Create policy Vì để cho nhanh thì ở đây tôi sử dụng một số Role là FullAccess , trong thực tế thì lambda thực hiện hành động gì thì chỉ cấp đúng hành động đó cho Role . Và lưu ý nhớ thay trong role của tôi thành tài khoản của bạn nhé .\nĐể lấy account id , nó nằm ở phần góc trên bên phải của màn hình Cấu hình cho file : ws-register-new-task-definition\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ecs:DescribeTaskDefinition\u0026#34;, \u0026#34;ecs:RegisterTaskDefinition\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;iam:PassRole\u0026#34;, \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:iam::\u0026lt;your-account-id\u0026gt;:role/task-role-luan-van\u0026#34;, \u0026#34;arn:aws:iam::\u0026lt;your-account-di\u0026gt;:role/ecsTaskExecutionRole\u0026#34; ] } ] } Cấu hình cho file : ws-scale-out-ecs-service\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ecs:DescribeServices\u0026#34;, \u0026#34;ecs:UpdateService\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:ecs:ap-southeast-1:730335485777:service/*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;iam:PassRole\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::730335485777:role/ecsTaskExecutionRole\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;iam:PassRole\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::730335485777:role/task-role-luan-van\u0026#34; } ] } Cấu hình cho file : ws-check-blue-green\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;Statement1\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;elasticloadbalancing:DescribeListeners\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;iam:PassRole\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::730335485777:role/ecsTaskExecutionRole\u0026#34; } ] } Cấu hình cho file : ws-poll-target-health\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;Statement1\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;elasticloadbalancing:DescribeTargetHealth\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;iam:PassRole\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::730335485777:role/ecsTaskExecutionRole\u0026#34; } ] } Cấu hình cho file : ws-canary-switch-traffic\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;Statement1\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;elasticloadbalancing:ModifyListener\u0026#34;, \u0026#34;elasticloadbalancing:DescribeListeners\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;iam:PassRole\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::730335485777:role/ecsTaskExecutionRole\u0026#34; } ] } Cấu hình cho file : ws-scale-in-ecs-service\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ecs:DescribeServices\u0026#34;, \u0026#34;ecs:UpdateService\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:ecs:ap-southeast-1:730335485777:service/*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;iam:PassRole\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::730335485777:role/ecsTaskExecutionRole\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;iam:PassRole\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::730335485777:role/task-role-luan-van\u0026#34; } ] } Cấu hình cho file : ws-response-approval-information-from-slack : ở đây tôi dùng policy là AWSStepFunctionsFullAccess . Xem các add Attach policies này ở phần mục số 3\nCấu hình API Gateway cho lambda có nhiệm vụ gửi approval request tới Slack Vào giao diện Console của AWS , gõ vào thanh tìm kiếm Chọn vào Create API Ấn vào Build tại REST API Nhập vào API Name và sau đó Chọn Create API Chọn vào Create resource Nhập vào Resource name là interact và sau đó ấn Create resource Sau khi tạo thành công , ấn vào tên resource vừa tạo và ấn vào Create method Chọn Method type là : POST , chọn Integration type là : Lambda function , bật Lambda proxy interation . Tại phần Lambda function thì bạn cần nhập Function ARN của lambda ws-response-approval-information-from-slack . Cuối cùng click Create method Lưu ý : phải chọn Lambda proxy integration , nếu không thì Slack sẽ không gửi dữ liệu về được vì bị mất body\nĐể hiện thực toàn bộ thay đổi , bạn cần ấn Deploy API Tại mục Stage chọn New stage . Stage name bạn nhập vào prod . Cuối cùng ấn nút Deploy Sau đây là giao diện khi bạn Deploy API thành công , bạn sẽ có 1 API URL là Invoke URL , để sử dụng được API này bạn cần phải thêm vào Resource name ở cuối Invoke URL như sau : https://c0gmxh88u8.execute-api.ap-southeast-1.amazonaws.com/prod/interact Tiếp tục cấu hình Slack Nếu bạn đã thoát trang cấu hình cho Slack thì bạn vào link này : https://api.slack.com/apps\nBạn chọn AppName theo đúng Workspace bạn vừa tạo Tiếp theo , bạn vào mục Interactivity \u0026amp; Shortcuts và nhập API URL vào Request URL . Cuối cùng là ấn Save changes ở góc phải màn hình "
},
{
	"uri": "//localhost:1313/vi/7-create_cicd_pipline/7.3-create_alarm/",
	"title": "Tạo CloudWatch Alarm",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/3-create_applicationloadbalancer_and_targetgroup/",
	"title": "Tạo Load Balancer",
	"tags": [],
	"description": "",
	"content": "Tạo Target Group Gõ vào thanh tìm kiếm dịch vụ EC2 Kéo xuống cuối và chọn Target Groups Tạo Target Group cho Frontend Blue\nChọn Create target group Chọn target type là IP Addresses Nhập vào target group name là frontend-target-group-blue\nProtocol chọn HTTP và Port nhập vào là 5000\nIP address type chọn IPv4\nVPC chọn VPC vừa Tạo Chọn next Kéo xuống và chọn Create target group Tạo Target Group cho Frontend Green\nChọn Create target group Chọn target type là IP Addresses Nhập vào target group name là frontend-target-group-green\nProtocol chọn HTTP và Port nhập vào là 5000\nIP address type chọn IPv4\nVPC chọn VPC vừa Tạo Chọn next Kéo xuống và chọn Create target group Tạo Target Group cho Backend Blue\nChọn Create target group Chọn target type là IP Addresses Nhập vào target group name là backend-target-group-blue\nProtocol chọn HTTP và Port nhập vào là 8080\nIP address type chọn IPv4\nVPC chọn VPC vừa Tạo Chọn next Kéo xuống và chọn Create target group Tạo Target Group cho Backend Green\nChọn Create target group Chọn target type là IP Addresses Nhập vào target group name là backend-target-group-green\nProtocol chọn HTTP và Port nhập vào là 8080\nIP address type chọn IPv4\nVPC chọn VPC vừa Tạo Chọn next Kéo xuống và chọn Create target group Tạo Application Load Balancer Chọn Load Balancers Chọn Create load balancer Chọn Create tại phần Application Load Balancer Nhập Load balancer name\nChọn internet-facing\nChọn Load balancer IP address type là IPv4 Chọn VPC vừa tạo\nChọn tối đa số Avaibility Zones có thể Chọn\nChọn tất cả các Public subnet , nếu chọn Private subnet thì sẽ không thể nhận Internet traffic và cũng sẽ có cảnh báo Chọn Security group là public-sg đã tạo trước đó Tại Listener and Routing chọn Protocol là HTTP và Port là 80 và chọn Target group là frontend-target-group-blue Lưu ý : nếu bạn có tên miền đã mua tại Route53 thì có thể cấu hình ACM để có SSL/TLS . Sau đó tại phần Listener and Routing thì sẽ chọn HTTPS và Port 443 , sau đó xuống phần Secure Listener settings chọn Certificate mà bạn có . Để đơn giản trong bài lab này nên tôi chỉ truy cập qua HTTP\nBỏ qua việc cấu hình CloudFront , WAF , Global Accelerator\nKéo xuống cuối chọn Create load balancer Sau khi tạo xong sẽ có giao diện như sau Tạo từng rule cho backend và frontend Rule cho frontend Chọn vào listener Chọn vào Edit rule Chọn vào Add target group Chọn frontend-target-group-green\nChỉnh weight của Blue lên 100 , Green về 0 Cuối cùng chọn Save changes Rule cho backend Chọn vào Add rule Tiếp theo , tại phần Condition thì bạn chọn path Nhập vào Path condition value như sau /api/* Tiếp theo bạn chọn 2 target group và chỉnh weight như hình Cuối cùng ấn nút Next "
},
{
	"uri": "//localhost:1313/vi/7-create_cicd_pipline/7.4-create_step_functions/",
	"title": "Tạo CICD Pipline bằng Step Functions",
	"tags": [],
	"description": "",
	"content": "Nơi lưu trữ source code của các lambda function thực hiện việc CI/CD : vào project tên là LuanVanTotNghiep , sau đó vào .aws , tiếp tục vào CICD using step functions , tiếp tục vào step functions\nBạn vào giao diện Console của AWS , sau đó gõ tìm dịch vụ step functions trên thanh tìm kiếm như sau step functions Hình\nSau đó ấn Create state machine Hình\nNhập vào state machine name là ws-frontend-CICD , sau đó vào file có tên là : Final_state_machine_JSONPath . Copy toàn bộ nội dung của file vào mục Code của state machine Hình\nSau đó bạn cần chuyển qua mục design bên cạnh để điều chỉnh Resource ARN . Lúc này bạn nên mở 2 tab , trong đó : 1 tab hiển thị state machine , 1 tab hiển thị giao diện của lambda cho tiện copy 1 loại các Resource ARN .\nNhập vào state machine name là ws-backend-CICD , sau đó vào file có tên là : Final_state_machine_JSONPath\n"
},
{
	"uri": "//localhost:1313/vi/4-create_database/",
	"title": "Tạo cơ sở dữ liệu",
	"tags": [],
	"description": "",
	"content": "Tạo Database Nhập rds vào thanh tìm kiếm , và chọn vào dịch vụ Aurora and RDS Hình Tạo subnet group Chọn Create DB subnet group Hình\nNhập vào tên , description , Chọn VPC Hình\nTại phần Add subnet , chọn cả 2 AZs để đảm bảo HA ( High Availability ) . Tại phần chọn subnet , chọn toàn bộ Private subnet Hình\nSau đó chọn Create Hình\nTạo database Chọn mục databases Hình\nChọn Create database\nTạo EC2 - Bastion host Lưu ý : Tạo EC2 trong public subnet , cùng VPC với database , security group của RDS phải allow access cho security group của EC2 qua Port 3306 . Mục đích là để truy cập vào database để thêm cơ sở dữ liệu\n"
},
{
	"uri": "//localhost:1313/vi/7-create_cicd_pipline/7.5-create_codepipline/",
	"title": "Tạo CodePipline",
	"tags": [],
	"description": "",
	"content": "Tạo 2 secret để lưu tài khoản và mật khẩu của docker trong Secret Manager Gõ vào thanh tìm kiếm secret để tìm dịch vụ Secrets Manager Hình\nSau khi chọn vào dịch vụ Secrets Manager , chọn vào Store a new secret Hình\nChọn Secret Type và nhập vào tài khoản docker của bạn Hình\nNhập vào secret name là dockerhub-username-secret và ấn nút Next Hình\nTiếp tục ấn Next Hình\nVà cuối cùng ấn store Hình\nBạn làm tương tự để lưu mật khẩu docker , đặt secret name cho mật khẩu là : dockerhub-password-secret\n"
},
{
	"uri": "//localhost:1313/vi/5-deploy_backend/",
	"title": "Triển khai Backend",
	"tags": [],
	"description": "",
	"content": "Tạo Task Role Bạn gõ vào thanh tìm kiếm dịch vụ iam Hình\nChọn vào mục Roles Hình\nChọn vào Create role ở góc trên bên phải màn hình Hình\nChọn Trusted entity type là AWS Service Hình\nTrong phần Service or use case thì gõ vào container và chọn Elastic Container Service Hình\nChọn Elastic Container Service Task Hình\nTại phần này tôi không chọn Policy nào bởi vì project của tôi không tương tác với resource tại AWS , nếu bạn có project tương tác với AWS thông qua SDK ví dụ là : gửi dữ liệu vào S3 thì phải cấp quyền Put Object cho role .\nSau đó ấn nút Next Hình\nTiếp theo nhập vào Role name là task-role-luan-van Hình\nCuối cùng là kéo xuống và ấn Create role Hình\nTạo ECR Private Repository Pull project từ github về bằng link https://github.com/trinhtu34/ws-backend-api.git Tạo ECS Task Definitions Bạn gõ vào thanh tìm kiếm ecs để tìm dịch vụ ecs Hình\nSau đó ấn vào mục Task definitions để tạo task definition Hình\nTạo ECS Cluster Tạo ECS Service "
},
{
	"uri": "//localhost:1313/vi/6-deploy_frontend/",
	"title": "Triển khai Frontend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/7-create_cicd_pipline/",
	"title": "Tạo CICD Pipline",
	"tags": [],
	"description": "",
	"content": "Nội dung Tạo và Cấu hình Slack Tạo Lambda Functions Tạo CloudWatch Alarm Tạo Step Functions Tạo CodePipline "
},
{
	"uri": "//localhost:1313/vi/8-result_test/",
	"title": "Kiểm tra kết quả",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/9-clear_resource/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]